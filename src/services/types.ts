// tslint:disable
/**
 * WSO API
 * API for WSO services like factrak, facebook, dormtrak, course scheduler, and others.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: wso-dev@wso.williams.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface AdminKubeJobReturn
 */
export interface AdminKubeJobReturn {
  /**
   *
   * @type {string}
   * @memberof AdminKubeJobReturn
   */
  jobID?: string;
}

/**
 *
 * @export
 * @interface AuthAuthResponse
 */
export interface AuthAuthResponse {
  /**
   *
   * @type {string}
   * @memberof AuthAuthResponse
   */
  expire?: string;
  /**
   *
   * @type {string}
   * @memberof AuthAuthResponse
   */
  token?: string;
}

/**
 *
 * @export
 * @interface AutocompleteACEntry
 */
export interface AutocompleteACEntry {
  /**
   *
   * @type {number}
   * @memberof AutocompleteACEntry
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof AutocompleteACEntry
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof AutocompleteACEntry
   */
  value?: string;
}

/**
 *
 * @export
 * @interface BulletinCreateBulletinParams
 */
export interface BulletinCreateBulletinParams {
  /**
   *
   * @type {string}
   * @memberof BulletinCreateBulletinParams
   */
  body: string;
  /**
   *
   * @type {string}
   * @memberof BulletinCreateBulletinParams
   */
  endDate?: string;
  /**
   *
   * @type {boolean}
   * @memberof BulletinCreateBulletinParams
   */
  offer?: boolean;
  /**
   *
   * @type {string}
   * @memberof BulletinCreateBulletinParams
   */
  startDate?: string;
  /**
   *
   * @type {string}
   * @memberof BulletinCreateBulletinParams
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof BulletinCreateBulletinParams
   */
  type: string;
}

/**
 *
 * @export
 * @interface BulletinCreateDiscussionParams
 */
export interface BulletinCreateDiscussionParams {
  /**
   *
   * @type {string}
   * @memberof BulletinCreateDiscussionParams
   */
  content: string;
  /**
   *
   * @type {string}
   * @memberof BulletinCreateDiscussionParams
   */
  title: string;
}

/**
 *
 * @export
 * @interface BulletinCreatePostParams
 */
export interface BulletinCreatePostParams {
  /**
   *
   * @type {string}
   * @memberof BulletinCreatePostParams
   */
  content: string;
  /**
   *
   * @type {number}
   * @memberof BulletinCreatePostParams
   */
  discussionID: number;
}

/**
 *
 * @export
 * @interface BulletinCreateRideParams
 */
export interface BulletinCreateRideParams {
  /**
   *
   * @type {string}
   * @memberof BulletinCreateRideParams
   */
  body: string;
  /**
   *
   * @type {string}
   * @memberof BulletinCreateRideParams
   */
  date: string;
  /**
   *
   * @type {string}
   * @memberof BulletinCreateRideParams
   */
  destination: string;
  /**
   *
   * @type {boolean}
   * @memberof BulletinCreateRideParams
   */
  offer?: boolean;
  /**
   *
   * @type {string}
   * @memberof BulletinCreateRideParams
   */
  source: string;
}

/**
 *
 * @export
 * @interface BulletinUpdateBulletinParams
 */
export interface BulletinUpdateBulletinParams {
  /**
   *
   * @type {string}
   * @memberof BulletinUpdateBulletinParams
   */
  body?: string;
  /**
   *
   * @type {string}
   * @memberof BulletinUpdateBulletinParams
   */
  endDate?: string;
  /**
   *
   * @type {boolean}
   * @memberof BulletinUpdateBulletinParams
   */
  offer?: boolean;
  /**
   *
   * @type {string}
   * @memberof BulletinUpdateBulletinParams
   */
  startDate?: string;
  /**
   *
   * @type {string}
   * @memberof BulletinUpdateBulletinParams
   */
  title?: string;
}

/**
 *
 * @export
 * @interface BulletinUpdatePostParams
 */
export interface BulletinUpdatePostParams {
  /**
   *
   * @type {string}
   * @memberof BulletinUpdatePostParams
   */
  content?: string;
}

/**
 *
 * @export
 * @interface BulletinUpdateRideParams
 */
export interface BulletinUpdateRideParams {
  /**
   *
   * @type {string}
   * @memberof BulletinUpdateRideParams
   */
  body?: string;
  /**
   *
   * @type {string}
   * @memberof BulletinUpdateRideParams
   */
  date?: string;
  /**
   *
   * @type {boolean}
   * @memberof BulletinUpdateRideParams
   */
  offer?: boolean;
}

/**
 *
 * @export
 * @interface DormtrakReviewCreateParams
 */
export interface DormtrakReviewCreateParams {
  /**
   *
   * @type {string}
   * @memberof DormtrakReviewCreateParams
   */
  bathroomDesc?: string;
  /**
   *
   * @type {boolean}
   * @memberof DormtrakReviewCreateParams
   */
  bedAdjustable?: boolean;
  /**
   *
   * @type {string}
   * @memberof DormtrakReviewCreateParams
   */
  closet?: string;
  /**
   * Params:
   * @type {string}
   * @memberof DormtrakReviewCreateParams
   */
  comment?: string;
  /**
   *
   * @type {boolean}
   * @memberof DormtrakReviewCreateParams
   */
  commonRoomAccess?: boolean;
  /**
   *
   * @type {string}
   * @memberof DormtrakReviewCreateParams
   */
  commonRoomDesc?: string;
  /**
   * Must include this:
   * @type {number}
   * @memberof DormtrakReviewCreateParams
   */
  dormRoomID: number;
  /**
   *
   * @type {string}
   * @memberof DormtrakReviewCreateParams
   */
  flooring?: string;
  /**
   *
   * @type {string}
   * @memberof DormtrakReviewCreateParams
   */
  keyOrCard?: string;
  /**
   *
   * @type {number}
   * @memberof DormtrakReviewCreateParams
   */
  location?: number;
  /**
   *
   * @type {number}
   * @memberof DormtrakReviewCreateParams
   */
  loudness?: number;
  /**
   *
   * @type {string}
   * @memberof DormtrakReviewCreateParams
   */
  noise?: string;
  /**
   *
   * @type {boolean}
   * @memberof DormtrakReviewCreateParams
   */
  privateBathroom?: boolean;
  /**
   *
   * @type {number}
   * @memberof DormtrakReviewCreateParams
   */
  satisfaction?: number;
  /**
   *
   * @type {boolean}
   * @memberof DormtrakReviewCreateParams
   */
  thermostatAccess?: boolean;
  /**
   *
   * @type {number}
   * @memberof DormtrakReviewCreateParams
   */
  wifi?: number;
}

/**
 *
 * @export
 * @interface DormtrakReviewUpdateParams
 */
export interface DormtrakReviewUpdateParams {
  /**
   *
   * @type {string}
   * @memberof DormtrakReviewUpdateParams
   */
  bathroomDesc?: string;
  /**
   *
   * @type {boolean}
   * @memberof DormtrakReviewUpdateParams
   */
  bedAdjustable?: boolean;
  /**
   *
   * @type {string}
   * @memberof DormtrakReviewUpdateParams
   */
  closet?: string;
  /**
   *
   * @type {string}
   * @memberof DormtrakReviewUpdateParams
   */
  comment?: string;
  /**
   *
   * @type {boolean}
   * @memberof DormtrakReviewUpdateParams
   */
  commonRoomAccess?: boolean;
  /**
   *
   * @type {string}
   * @memberof DormtrakReviewUpdateParams
   */
  commonRoomDesc?: string;
  /**
   *
   * @type {string}
   * @memberof DormtrakReviewUpdateParams
   */
  flooring?: string;
  /**
   *
   * @type {string}
   * @memberof DormtrakReviewUpdateParams
   */
  keyOrCard?: string;
  /**
   *
   * @type {number}
   * @memberof DormtrakReviewUpdateParams
   */
  location?: number;
  /**
   *
   * @type {number}
   * @memberof DormtrakReviewUpdateParams
   */
  loudness?: number;
  /**
   *
   * @type {string}
   * @memberof DormtrakReviewUpdateParams
   */
  noise?: string;
  /**
   *
   * @type {boolean}
   * @memberof DormtrakReviewUpdateParams
   */
  privateBathroom?: boolean;
  /**
   *
   * @type {number}
   * @memberof DormtrakReviewUpdateParams
   */
  satisfaction?: number;
  /**
   *
   * @type {boolean}
   * @memberof DormtrakReviewUpdateParams
   */
  thermostatAccess?: boolean;
  /**
   *
   * @type {number}
   * @memberof DormtrakReviewUpdateParams
   */
  wifi?: number;
}

/**
 *
 * @export
 * @interface EphmatchCountMatchesResponse
 */
export interface EphmatchCountMatchesResponse {
  /**
   *
   * @type {number}
   * @memberof EphmatchCountMatchesResponse
   */
  total?: number;
  /**
   *
   * @type {number}
   * @memberof EphmatchCountMatchesResponse
   */
  unseen?: number;
}

/**
 *
 * @export
 * @interface EphmatchGetAvailabilityResp
 */
export interface EphmatchGetAvailabilityResp {
  /**
   * If Ephmatch is currently available
   * @type {boolean}
   * @memberof EphmatchGetAvailabilityResp
   */
  available?: boolean;
  /**
   * Closing time for current Ephmatch era/period
   * @type {string}
   * @memberof EphmatchGetAvailabilityResp
   */
  closingTime?: string;
  /**
   * Next time Ephmatch will be open
   * @type {string}
   * @memberof EphmatchGetAvailabilityResp
   */
  nextOpenTime?: string;
  /**
   * If Ephmatch has no closing time set
   * @type {boolean}
   * @memberof EphmatchGetAvailabilityResp
   */
  openIndefinitely?: boolean;
}

/**
 *
 * @export
 * @interface EphmatchLikeProfileResp
 */
export interface EphmatchLikeProfileResp {
  /**
   *
   * @type {boolean}
   * @memberof EphmatchLikeProfileResp
   */
  matched?: boolean;
}

/**
 *
 * @export
 * @interface EphmatchProfileCreateParams
 */
export interface EphmatchProfileCreateParams {
  /**
   *
   * @type {string}
   * @memberof EphmatchProfileCreateParams
   */
  locationCountry?: string;
  /**
   *
   * @type {string}
   * @memberof EphmatchProfileCreateParams
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof EphmatchProfileCreateParams
   */
  locationState?: string;
  /**
   *
   * @type {string}
   * @memberof EphmatchProfileCreateParams
   */
  locationTown?: string;
  /**
   *
   * @type {boolean}
   * @memberof EphmatchProfileCreateParams
   */
  locationVisible?: boolean;
  /**
   *
   * @type {string}
   * @memberof EphmatchProfileCreateParams
   */
  matchMessage?: string;
  /**
   *
   * @type {string}
   * @memberof EphmatchProfileCreateParams
   */
  messagingPlatform?: string;
  /**
   *
   * @type {string}
   * @memberof EphmatchProfileCreateParams
   */
  messagingUsername?: string;
}

/**
 *
 * @export
 * @interface EphmatchProfileUpdateParams
 */
export interface EphmatchProfileUpdateParams {
  /**
   *
   * @type {string}
   * @memberof EphmatchProfileUpdateParams
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof EphmatchProfileUpdateParams
   */
  locationCountry?: string;
  /**
   *
   * @type {string}
   * @memberof EphmatchProfileUpdateParams
   */
  locationState?: string;
  /**
   *
   * @type {string}
   * @memberof EphmatchProfileUpdateParams
   */
  locationTown?: string;
  /**
   *
   * @type {boolean}
   * @memberof EphmatchProfileUpdateParams
   */
  locationVisible?: boolean;
  /**
   *
   * @type {string}
   * @memberof EphmatchProfileUpdateParams
   */
  matchMessage?: string;
  /**
   *
   * @type {string}
   * @memberof EphmatchProfileUpdateParams
   */
  messagingPlatform?: string;
  /**
   *
   * @type {string}
   * @memberof EphmatchProfileUpdateParams
   */
  messagingUsername?: string;
}

/**
 *
 * @export
 * @interface FactrakAgreementCreateParams
 */
export interface FactrakAgreementCreateParams {
  /**
   *
   * @type {boolean}
   * @memberof FactrakAgreementCreateParams
   */
  agree?: boolean;
}

/**
 *
 * @export
 * @interface FactrakAgreementUpdateParams
 */
export interface FactrakAgreementUpdateParams {
  /**
   *
   * @type {boolean}
   * @memberof FactrakAgreementUpdateParams
   */
  agree?: boolean;
}

/**
 *
 * @export
 * @interface FactrakSurveyCreateParams
 */
export interface FactrakSurveyCreateParams {
  /**
   *
   * @type {number}
   * @memberof FactrakSurveyCreateParams
   */
  approachability?: number;
  /**
   * Or this:
   * @type {string}
   * @memberof FactrakSurveyCreateParams
   */
  areaOfStudyAbbreviation?: string;
  /**
   * Params:
   * @type {string}
   * @memberof FactrakSurveyCreateParams
   */
  comment: string;
  /**
   * Must include either this:
   * @type {number}
   * @memberof FactrakSurveyCreateParams
   */
  courseID?: number;
  /**
   * Like \"256\"
   * @type {string}
   * @memberof FactrakSurveyCreateParams
   */
  courseNumber?: string;
  /**
   *
   * @type {number}
   * @memberof FactrakSurveyCreateParams
   */
  courseStimulating?: number;
  /**
   *
   * @type {number}
   * @memberof FactrakSurveyCreateParams
   */
  courseWorkload?: number;
  /**
   *
   * @type {string}
   * @memberof FactrakSurveyCreateParams
   */
  gradeReceived?: string;
  /**
   *
   * @type {number}
   * @memberof FactrakSurveyCreateParams
   */
  leadLecture?: number;
  /**
   *
   * @type {number}
   * @memberof FactrakSurveyCreateParams
   */
  outsideHelpfulness?: number;
  /**
   * Must include this:
   * @type {number}
   * @memberof FactrakSurveyCreateParams
   */
  professorID: number;
  /**
   *
   * @type {number}
   * @memberof FactrakSurveyCreateParams
   */
  promoteDiscussion?: number;
  /**
   *
   * @type {boolean}
   * @memberof FactrakSurveyCreateParams
   */
  wouldRecommendCourse?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof FactrakSurveyCreateParams
   */
  wouldTakeAnother?: boolean;
}

/**
 *
 * @export
 * @interface FactrakSurveyUpdateParams
 */
export interface FactrakSurveyUpdateParams {
  /**
   *
   * @type {number}
   * @memberof FactrakSurveyUpdateParams
   */
  approachability?: number;
  /**
   * Params:
   * @type {string}
   * @memberof FactrakSurveyUpdateParams
   */
  comment?: string;
  /**
   *
   * @type {number}
   * @memberof FactrakSurveyUpdateParams
   */
  courseStimulating?: number;
  /**
   *
   * @type {number}
   * @memberof FactrakSurveyUpdateParams
   */
  courseWorkload?: number;
  /**
   *
   * @type {string}
   * @memberof FactrakSurveyUpdateParams
   */
  gradeReceived?: string;
  /**
   *
   * @type {number}
   * @memberof FactrakSurveyUpdateParams
   */
  leadLecture?: number;
  /**
   *
   * @type {number}
   * @memberof FactrakSurveyUpdateParams
   */
  outsideHelpfulness?: number;
  /**
   *
   * @type {number}
   * @memberof FactrakSurveyUpdateParams
   */
  promoteDiscussion?: number;
  /**
   *
   * @type {boolean}
   * @memberof FactrakSurveyUpdateParams
   */
  wouldRecommendCourse?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof FactrakSurveyUpdateParams
   */
  wouldTakeAnother?: boolean;
}

/**
 *
 * @export
 * @interface IdentityCredentials
 */
export interface IdentityCredentials {
  /**
   * If true, will authenticate based on IP. Fail if cannot get on-campus token.
   * @type {boolean}
   * @memberof IdentityCredentials
   */
  localIP?: boolean;
  /**
   *
   * @type {string}
   * @memberof IdentityCredentials
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof IdentityCredentials
   */
  unixID?: string;
  /**
   * If true, will authenticate based on IP. Will return either off-campus or on-campus token
   * @type {boolean}
   * @memberof IdentityCredentials
   */
  useIP?: boolean;
}

/**
 *
 * @export
 * @interface ModelsAreaOfStudy
 */
export interface ModelsAreaOfStudy {
  /**
   *
   * @type {string}
   * @memberof ModelsAreaOfStudy
   */
  abbreviation?: string;
  /**
   * Has many courses
   * @type {Array<ModelsCourse>}
   * @memberof ModelsAreaOfStudy
   */
  courses?: Array<ModelsCourse>;
  /**
   *
   * @type {ModelsDepartment}
   * @memberof ModelsAreaOfStudy
   */
  department?: ModelsDepartment;
  /**
   * Belongs to department
   * @type {number}
   * @memberof ModelsAreaOfStudy
   */
  departmentID?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsAreaOfStudy
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ModelsAreaOfStudy
   */
  name?: string;
}

/**
 *
 * @export
 * @interface ModelsBulletin
 */
export interface ModelsBulletin {
  /**
   *
   * @type {string}
   * @memberof ModelsBulletin
   */
  body?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsBulletin
   */
  endDate?: string;
  /**
   *
   * @type {number}
   * @memberof ModelsBulletin
   */
  id?: number;
  /**
   *
   * @type {boolean}
   * @memberof ModelsBulletin
   */
  offer?: boolean;
  /**
   *
   * @type {string}
   * @memberof ModelsBulletin
   */
  startDate?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsBulletin
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsBulletin
   */
  type?: string;
  /**
   *
   * @type {ModelsUser}
   * @memberof ModelsBulletin
   */
  user?: ModelsUser;
  /**
   * Author information
   * @type {number}
   * @memberof ModelsBulletin
   */
  userID?: number;
}

/**
 *
 * @export
 * @interface ModelsBulletinRide
 */
export interface ModelsBulletinRide {
  /**
   *
   * @type {string}
   * @memberof ModelsBulletinRide
   */
  body?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsBulletinRide
   */
  date?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsBulletinRide
   */
  destination?: string;
  /**
   *
   * @type {number}
   * @memberof ModelsBulletinRide
   */
  id?: number;
  /**
   *
   * @type {boolean}
   * @memberof ModelsBulletinRide
   */
  offer?: boolean;
  /**
   *
   * @type {string}
   * @memberof ModelsBulletinRide
   */
  source?: string;
  /**
   *
   * @type {ModelsUser}
   * @memberof ModelsBulletinRide
   */
  user?: ModelsUser;
  /**
   * Belongs to user
   * @type {number}
   * @memberof ModelsBulletinRide
   */
  userID?: number;
}

/**
 *
 * @export
 * @interface ModelsCourse
 */
export interface ModelsCourse {
  /**
   *
   * @type {ModelsAreaOfStudy}
   * @memberof ModelsCourse
   */
  areaOfStudy?: ModelsAreaOfStudy;
  /**
   * Belongs to area of study
   * @type {number}
   * @memberof ModelsCourse
   */
  areaOfStudyID?: number;
  /**
   * Has many factrak surveys
   * @type {Array<ModelsFactrakSurvey>}
   * @memberof ModelsCourse
   */
  factrakSurveys?: Array<ModelsFactrakSurvey>;
  /**
   *
   * @type {number}
   * @memberof ModelsCourse
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ModelsCourse
   */
  number?: string;
  /**
   * Has many professors (thru factrak surveys). Ignore this in Gorm. Populate this only whenever needed.
   * @type {Array<ModelsUser>}
   * @memberof ModelsCourse
   */
  professors?: Array<ModelsUser>;
}

/**
 *
 * @export
 * @interface ModelsDepartment
 */
export interface ModelsDepartment {
  /**
   * Has many areas of study
   * @type {Array<ModelsAreaOfStudy>}
   * @memberof ModelsDepartment
   */
  areasOfStudy?: Array<ModelsAreaOfStudy>;
  /**
   *
   * @type {number}
   * @memberof ModelsDepartment
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ModelsDepartment
   */
  name?: string;
  /**
   * Has many professors & staff
   * @type {Array<ModelsUser>}
   * @memberof ModelsDepartment
   */
  users?: Array<ModelsUser>;
}

/**
 *
 * @export
 * @interface ModelsDiscussion
 */
export interface ModelsDiscussion {
  /**
   * Pass the created time: not looked at by GORM
   * @type {string}
   * @memberof ModelsDiscussion
   */
  createdTime?: string;
  /**
   * This is for when a user is deleted, but we still want to keep the info. Ideally, we would only soft delete users but, we need to maintain the previous WSO's standards.
   * @type {string}
   * @memberof ModelsDiscussion
   */
  exUserName?: string;
  /**
   *
   * @type {number}
   * @memberof ModelsDiscussion
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ModelsDiscussion
   */
  lastActive?: string;
  /**
   * Has many posts
   * @type {Array<ModelsPost>}
   * @memberof ModelsDiscussion
   */
  posts?: Array<ModelsPost>;
  /**
   *
   * @type {string}
   * @memberof ModelsDiscussion
   */
  title?: string;
  /**
   *
   * @type {ModelsUser}
   * @memberof ModelsDiscussion
   */
  user?: ModelsUser;
  /**
   * Belongs to user
   * @type {number}
   * @memberof ModelsDiscussion
   */
  userID?: number;
}

/**
 *
 * @export
 * @interface ModelsDorm
 */
export interface ModelsDorm {
  /**
   *
   * @type {number}
   * @memberof ModelsDorm
   */
  averageDoubleArea?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDorm
   */
  averageSingleArea?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDorm
   */
  bathroomRatio?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDorm
   */
  built?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDorm
   */
  capacity?: number;
  /**
   *
   * @type {string}
   * @memberof ModelsDorm
   */
  description?: string;
  /**
   * Has many dorm rooms
   * @type {Array<ModelsDormRoom>}
   * @memberof ModelsDorm
   */
  dormRooms?: Array<ModelsDormRoom>;
  /**
   *
   * @type {number}
   * @memberof ModelsDorm
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ModelsDorm
   */
  keyOrCard?: string;
  /**
   *
   * @type {number}
   * @memberof ModelsDorm
   */
  location?: number;
  /**
   * These are average statistics from dorm reviews
   * @type {number}
   * @memberof ModelsDorm
   */
  loudness?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDorm
   */
  modeDoubleArea?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDorm
   */
  modeSingleArea?: number;
  /**
   *
   * @type {string}
   * @memberof ModelsDorm
   */
  name?: string;
  /**
   *
   * @type {ModelsNeighborhood}
   * @memberof ModelsDorm
   */
  neighborhood?: ModelsNeighborhood;
  /**
   * Belongs to neighborhood
   * @type {number}
   * @memberof ModelsDorm
   */
  neighborhoodID?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDorm
   */
  numberBathrooms?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDorm
   */
  numberDoubles?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDorm
   */
  numberFlex?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDorm
   */
  numberSingles?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDorm
   */
  numberWashers?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDorm
   */
  satisfaction?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDorm
   */
  wifi?: number;
}

/**
 *
 * @export
 * @interface ModelsDormFacts
 */
export interface ModelsDormFacts {
  /**
   *
   * @type {number}
   * @memberof ModelsDormFacts
   */
  averageDoublesArea?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDormFacts
   */
  averageLocation?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDormFacts
   */
  averageLoudness?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDormFacts
   */
  averageSatisfaction?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDormFacts
   */
  averageSinglesArea?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDormFacts
   */
  averageWifi?: number;
  /**
   *
   * @type {ModelsDormRoom}
   * @memberof ModelsDormFacts
   */
  biggestDouble?: ModelsDormRoom;
  /**
   *
   * @type {ModelsDormRoom}
   * @memberof ModelsDormFacts
   */
  biggestSingle?: ModelsDormRoom;
  /**
   *
   * @type {number}
   * @memberof ModelsDormFacts
   */
  capacity?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDormFacts
   */
  commonRoomAccessRatio?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDormFacts
   */
  doublesCount?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDormFacts
   */
  flexCount?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDormFacts
   */
  juniorCount?: number;
  /**
   *
   * @type {string}
   * @memberof ModelsDormFacts
   */
  keyOrCard?: string;
  /**
   *
   * @type {number}
   * @memberof ModelsDormFacts
   */
  modeDoublesArea?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDormFacts
   */
  modeSinglesArea?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDormFacts
   */
  seniorCount?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDormFacts
   */
  singlesCount?: number;
  /**
   *
   * @type {ModelsDormRoom}
   * @memberof ModelsDormFacts
   */
  smallestDouble?: ModelsDormRoom;
  /**
   *
   * @type {ModelsDormRoom}
   * @memberof ModelsDormFacts
   */
  smallestSingle?: ModelsDormRoom;
  /**
   *
   * @type {number}
   * @memberof ModelsDormFacts
   */
  sophomoreCount?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDormFacts
   */
  studentToBathroomRatio?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDormFacts
   */
  washersCount?: number;
}

/**
 *
 * @export
 * @interface ModelsDormRoom
 */
export interface ModelsDormRoom {
  /**
   *
   * @type {number}
   * @memberof ModelsDormRoom
   */
  area?: number;
  /**
   *
   * @type {string}
   * @memberof ModelsDormRoom
   */
  bathroomDesc?: string;
  /**
   *
   * @type {boolean}
   * @memberof ModelsDormRoom
   */
  bedAdjustable?: boolean;
  /**
   *
   * @type {string}
   * @memberof ModelsDormRoom
   */
  closet?: string;
  /**
   *
   * @type {boolean}
   * @memberof ModelsDormRoom
   */
  commonRoomAccess?: boolean;
  /**
   *
   * @type {string}
   * @memberof ModelsDormRoom
   */
  commonRoomDesc?: string;
  /**
   *
   * @type {ModelsDorm}
   * @memberof ModelsDormRoom
   */
  dorm?: ModelsDorm;
  /**
   * Belongs to dorm
   * @type {number}
   * @memberof ModelsDormRoom
   */
  dormID?: number;
  /**
   * Has many Dormtrak reviews
   * @type {Array<ModelsDormtrakReview>}
   * @memberof ModelsDormRoom
   */
  dormtrakReviews?: Array<ModelsDormtrakReview>;
  /**
   *
   * @type {string}
   * @memberof ModelsDormRoom
   */
  faces?: string;
  /**
   *
   * @type {number}
   * @memberof ModelsDormRoom
   */
  floorNumber?: number;
  /**
   *
   * @type {string}
   * @memberof ModelsDormRoom
   */
  flooring?: string;
  /**
   *
   * @type {boolean}
   * @memberof ModelsDormRoom
   */
  hc?: boolean;
  /**
   *
   * @type {number}
   * @memberof ModelsDormRoom
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ModelsDormRoom
   */
  keyOrCard?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsDormRoom
   */
  noise?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsDormRoom
   */
  number?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsDormRoom
   */
  picture?: string;
  /**
   *
   * @type {boolean}
   * @memberof ModelsDormRoom
   */
  privateBathroom?: boolean;
  /**
   *
   * @type {string}
   * @memberof ModelsDormRoom
   */
  roomType?: string;
  /**
   *
   * @type {boolean}
   * @memberof ModelsDormRoom
   */
  thermostatAccess?: boolean;
  /**
   * Has many students
   * @type {Array<ModelsUser>}
   * @memberof ModelsDormRoom
   */
  users?: Array<ModelsUser>;
  /**
   *
   * @type {boolean}
   * @memberof ModelsDormRoom
   */
  walkthrough?: boolean;
}

/**
 *
 * @export
 * @interface ModelsDormtrakRanking
 */
export interface ModelsDormtrakRanking {
  /**
   *
   * @type {Array<ModelsDormRoom>}
   * @memberof ModelsDormtrakRanking
   */
  biggestDoubles?: Array<ModelsDormRoom>;
  /**
   *
   * @type {Array<ModelsDormRoom>}
   * @memberof ModelsDormtrakRanking
   */
  biggestSingles?: Array<ModelsDormRoom>;
  /**
   *
   * @type {Array<ModelsDorm>}
   * @memberof ModelsDormtrakRanking
   */
  fewestBathrooms?: Array<ModelsDorm>;
  /**
   *
   * @type {Array<ModelsDorm>}
   * @memberof ModelsDormtrakRanking
   */
  maxMeanDoubleSize?: Array<ModelsDorm>;
  /**
   *
   * @type {Array<ModelsDorm>}
   * @memberof ModelsDormtrakRanking
   */
  maxMeanSingleSize?: Array<ModelsDorm>;
  /**
   *
   * @type {Array<ModelsDorm>}
   * @memberof ModelsDormtrakRanking
   */
  minMeanDoubleSize?: Array<ModelsDorm>;
  /**
   *
   * @type {Array<ModelsDorm>}
   * @memberof ModelsDormtrakRanking
   */
  minMeanSingleSize?: Array<ModelsDorm>;
  /**
   *
   * @type {Array<ModelsDorm>}
   * @memberof ModelsDormtrakRanking
   */
  mostBathrooms?: Array<ModelsDorm>;
  /**
   *
   * @type {Array<ModelsDorm>}
   * @memberof ModelsDormtrakRanking
   */
  mostDoubles?: Array<ModelsDorm>;
  /**
   *
   * @type {Array<ModelsDorm>}
   * @memberof ModelsDormtrakRanking
   */
  mostSingles?: Array<ModelsDorm>;
  /**
   *
   * @type {Array<ModelsDormRoom>}
   * @memberof ModelsDormtrakRanking
   */
  smallestDoubles?: Array<ModelsDormRoom>;
  /**
   *
   * @type {Array<ModelsDormRoom>}
   * @memberof ModelsDormtrakRanking
   */
  smallestSingles?: Array<ModelsDormRoom>;
}

/**
 *
 * @export
 * @interface ModelsDormtrakReview
 */
export interface ModelsDormtrakReview {
  /**
   *
   * @type {string}
   * @memberof ModelsDormtrakReview
   */
  bathroomDesc?: string;
  /**
   *
   * @type {boolean}
   * @memberof ModelsDormtrakReview
   */
  bedAdjustable?: boolean;
  /**
   *
   * @type {string}
   * @memberof ModelsDormtrakReview
   */
  closet?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsDormtrakReview
   */
  comment?: string;
  /**
   *
   * @type {boolean}
   * @memberof ModelsDormtrakReview
   */
  commonRoomAccess?: boolean;
  /**
   *
   * @type {string}
   * @memberof ModelsDormtrakReview
   */
  commonRoomDesc?: string;
  /**
   * Pass the created time: not looked at by GORM
   * @type {string}
   * @memberof ModelsDormtrakReview
   */
  createdTime?: string;
  /**
   *
   * @type {ModelsDormRoom}
   * @memberof ModelsDormtrakReview
   */
  dormRoom?: ModelsDormRoom;
  /**
   * Belongs to dorm room
   * @type {number}
   * @memberof ModelsDormtrakReview
   */
  dormRoomID?: number;
  /**
   *
   * @type {string}
   * @memberof ModelsDormtrakReview
   */
  flooring?: string;
  /**
   *
   * @type {number}
   * @memberof ModelsDormtrakReview
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ModelsDormtrakReview
   */
  keyOrCard?: string;
  /**
   *
   * @type {number}
   * @memberof ModelsDormtrakReview
   */
  location?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDormtrakReview
   */
  loudness?: number;
  /**
   *
   * @type {string}
   * @memberof ModelsDormtrakReview
   */
  noise?: string;
  /**
   *
   * @type {boolean}
   * @memberof ModelsDormtrakReview
   */
  privateBathroom?: boolean;
  /**
   *
   * @type {number}
   * @memberof ModelsDormtrakReview
   */
  satisfaction?: number;
  /**
   *
   * @type {boolean}
   * @memberof ModelsDormtrakReview
   */
  thermostatAccess?: boolean;
  /**
   *
   * @type {ModelsUser}
   * @memberof ModelsDormtrakReview
   */
  user?: ModelsUser;
  /**
   * Belongs to user (student)
   * @type {number}
   * @memberof ModelsDormtrakReview
   */
  userID?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsDormtrakReview
   */
  wifi?: number;
}

/**
 *
 * @export
 * @interface ModelsEphcatch
 */
export interface ModelsEphcatch {
  /**
   * Pass the created time: not looked at by GORM
   * @type {string}
   * @memberof ModelsEphcatch
   */
  createdTime?: string;
  /**
   *
   * @type {number}
   * @memberof ModelsEphcatch
   */
  id?: number;
  /**
   * Belongs to other
   * @type {ModelsUser}
   * @memberof ModelsEphcatch
   */
  other?: ModelsUser;
  /**
   *
   * @type {number}
   * @memberof ModelsEphcatch
   */
  otherID?: number;
  /**
   *
   * @type {boolean}
   * @memberof ModelsEphcatch
   */
  seen?: boolean;
  /**
   * Belongs to user
   * @type {ModelsUser}
   * @memberof ModelsEphcatch
   */
  user?: ModelsUser;
  /**
   *
   * @type {number}
   * @memberof ModelsEphcatch
   */
  userID?: number;
}

/**
 *
 * @export
 * @interface ModelsEphcatcher
 */
export interface ModelsEphcatcher {
  /**
   *
   * @type {number}
   * @memberof ModelsEphcatcher
   */
  id?: number;
  /**
   * If me (user) has an ephcatch entry where ephcatch.other_id=users.id and ephcatch.user_id=myID
   * @type {boolean}
   * @memberof ModelsEphcatcher
   */
  liked?: boolean;
  /**
   *
   * @type {string}
   * @memberof ModelsEphcatcher
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsEphcatcher
   */
  unixID?: string;
}

/**
 *
 * @export
 * @interface ModelsEphmatchProfile
 */
export interface ModelsEphmatchProfile {
  /**
   * Non db entry that acts as a flag for deleted_at column
   * @type {boolean}
   * @memberof ModelsEphmatchProfile
   */
  deleted?: boolean;
  /**
   * These are optional
   * @type {string}
   * @memberof ModelsEphmatchProfile
   */
  description?: string;
  /**
   *
   * @type {number}
   * @memberof ModelsEphmatchProfile
   */
  id?: number;
  /**
   * If self has liked this profile (user)
   * @type {boolean}
   * @memberof ModelsEphmatchProfile
   */
  liked?: boolean;
  /**
   *
   * @type {string}
   * @memberof ModelsEphmatchProfile
   */
  locationCountry?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsEphmatchProfile
   */
  locationState?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsEphmatchProfile
   */
  locationTown?: string;
  /**
   * Current location columns
   * @type {boolean}
   * @memberof ModelsEphmatchProfile
   */
  locationVisible?: boolean;
  /**
   *
   * @type {string}
   * @memberof ModelsEphmatchProfile
   */
  matchMessage?: string;
  /**
   * If user and self are matched
   * @type {boolean}
   * @memberof ModelsEphmatchProfile
   */
  matched?: boolean;
  /**
   * Messaging platform columns
   * @type {string}
   * @memberof ModelsEphmatchProfile
   */
  messagingPlatform?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsEphmatchProfile
   */
  messagingUsername?: string;
  /**
   *
   * @type {ModelsUser}
   * @memberof ModelsEphmatchProfile
   */
  user?: ModelsUser;
  /**
   * Belongs to user
   * @type {number}
   * @memberof ModelsEphmatchProfile
   */
  userID?: number;
}

/**
 *
 * @export
 * @interface ModelsFactrakAgreement
 */
export interface ModelsFactrakAgreement {
  /**
   *
   * @type {boolean}
   * @memberof ModelsFactrakAgreement
   */
  agrees?: boolean;
  /**
   *
   * @type {ModelsFactrakSurvey}
   * @memberof ModelsFactrakAgreement
   */
  factrakSurvey?: ModelsFactrakSurvey;
  /**
   * Belongs to survey
   * @type {number}
   * @memberof ModelsFactrakAgreement
   */
  factrakSurveyID?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakAgreement
   */
  id?: number;
  /**
   *
   * @type {ModelsUser}
   * @memberof ModelsFactrakAgreement
   */
  user?: ModelsUser;
  /**
   * Belongs to user
   * @type {number}
   * @memberof ModelsFactrakAgreement
   */
  userID?: number;
}

/**
 *
 * @export
 * @interface ModelsFactrakSurvey
 */
export interface ModelsFactrakSurvey {
  /**
   * Has many agreements
   * @type {Array<ModelsFactrakAgreement>}
   * @memberof ModelsFactrakSurvey
   */
  agreements?: Array<ModelsFactrakAgreement>;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurvey
   */
  approachability?: number;
  /**
   * Pass if the client agreed with the survey; not looked at by GORM. True means user agreed, false means user disagreed, and null/missing means user does not have any agreement/disagreement.
   * @type {boolean}
   * @memberof ModelsFactrakSurvey
   */
  clientAgreement?: boolean;
  /**
   *
   * @type {string}
   * @memberof ModelsFactrakSurvey
   */
  comment?: string;
  /**
   *
   * @type {ModelsCourse}
   * @memberof ModelsFactrakSurvey
   */
  course?: ModelsCourse;
  /**
   * Belongs to course
   * @type {number}
   * @memberof ModelsFactrakSurvey
   */
  courseID?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurvey
   */
  courseStimulating?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurvey
   */
  courseWorkload?: number;
  /**
   * Pass the created time: not looked at by GORM
   * @type {string}
   * @memberof ModelsFactrakSurvey
   */
  createdTime?: string;
  /**
   *
   * @type {boolean}
   * @memberof ModelsFactrakSurvey
   */
  flagged?: boolean;
  /**
   *
   * @type {string}
   * @memberof ModelsFactrakSurvey
   */
  gradeReceived?: string;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurvey
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurvey
   */
  leadLecture?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurvey
   */
  outsideHelpfulness?: number;
  /**
   *
   * @type {ModelsUser}
   * @memberof ModelsFactrakSurvey
   */
  professor?: ModelsUser;
  /**
   * Belongs to professor
   * @type {number}
   * @memberof ModelsFactrakSurvey
   */
  professorID?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurvey
   */
  promoteDiscussion?: number;
  /**
   * Not looked at by GORM, just for returning in JSON
   * @type {number}
   * @memberof ModelsFactrakSurvey
   */
  totalAgree?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurvey
   */
  totalDisagree?: number;
  /**
   *
   * @type {ModelsUser}
   * @memberof ModelsFactrakSurvey
   */
  user?: ModelsUser;
  /**
   * Belongs to user (student)
   * @type {number}
   * @memberof ModelsFactrakSurvey
   */
  userID?: number;
  /**
   *
   * @type {boolean}
   * @memberof ModelsFactrakSurvey
   */
  wouldRecommendCourse?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModelsFactrakSurvey
   */
  wouldTakeAnother?: boolean;
}

/**
 *
 * @export
 * @interface ModelsFactrakSurveyAvgRatings
 */
export interface ModelsFactrakSurveyAvgRatings {
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurveyAvgRatings
   */
  avgApproachability?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurveyAvgRatings
   */
  avgCourseStimulating?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurveyAvgRatings
   */
  avgCourseWorkload?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurveyAvgRatings
   */
  avgLeadLecture?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurveyAvgRatings
   */
  avgOutsideHelpfulness?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurveyAvgRatings
   */
  avgPromoteDiscussion?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurveyAvgRatings
   */
  avgWouldRecommendCourse?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurveyAvgRatings
   */
  avgWouldTakeAnother?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurveyAvgRatings
   */
  numApproachability?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurveyAvgRatings
   */
  numCourseStimulating?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurveyAvgRatings
   */
  numCourseWorkload?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurveyAvgRatings
   */
  numLeadLecture?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurveyAvgRatings
   */
  numOutsideHelpfulness?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurveyAvgRatings
   */
  numPromoteDiscussion?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurveyAvgRatings
   */
  numWouldRecommendCourse?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsFactrakSurveyAvgRatings
   */
  numWouldTakeAnother?: number;
}

/**
 *
 * @export
 * @interface ModelsNeighborhood
 */
export interface ModelsNeighborhood {
  /**
   * Had many dorms
   * @type {Array<ModelsDorm>}
   * @memberof ModelsNeighborhood
   */
  dorms?: Array<ModelsDorm>;
  /**
   *
   * @type {number}
   * @memberof ModelsNeighborhood
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ModelsNeighborhood
   */
  name?: string;
  /**
   *
   * @type {boolean}
   * @memberof ModelsNeighborhood
   */
  trakked?: boolean;
}

/**
 *
 * @export
 * @interface ModelsNeighborhoodFacts
 */
export interface ModelsNeighborhoodFacts {
  /**
   *
   * @type {number}
   * @memberof ModelsNeighborhoodFacts
   */
  juniorCount?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsNeighborhoodFacts
   */
  seniorCount?: number;
  /**
   *
   * @type {number}
   * @memberof ModelsNeighborhoodFacts
   */
  sophomoreCount?: number;
}

/**
 *
 * @export
 * @interface ModelsOffice
 */
export interface ModelsOffice {
  /**
   *
   * @type {number}
   * @memberof ModelsOffice
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ModelsOffice
   */
  number?: string;
  /**
   *
   * @type {Array<ModelsUser>}
   * @memberof ModelsOffice
   */
  users?: Array<ModelsUser>;
}

/**
 *
 * @export
 * @interface ModelsPost
 */
export interface ModelsPost {
  /**
   *
   * @type {string}
   * @memberof ModelsPost
   */
  content?: string;
  /**
   * Pass the created time: not looked at by GORM
   * @type {string}
   * @memberof ModelsPost
   */
  createdTime?: string;
  /**
   *
   * @type {ModelsDiscussion}
   * @memberof ModelsPost
   */
  discussion?: ModelsDiscussion;
  /**
   * Belongs to discussion
   * @type {number}
   * @memberof ModelsPost
   */
  discussionID?: number;
  /**
   * This is for when a user is deleted, but we still want to keep the info. Ideally, we would only soft delete users but, we need to maintain the previous WSO's standards.
   * @type {string}
   * @memberof ModelsPost
   */
  exUserName?: string;
  /**
   *
   * @type {number}
   * @memberof ModelsPost
   */
  id?: number;
  /**
   *
   * @type {ModelsUser}
   * @memberof ModelsPost
   */
  user?: ModelsUser;
  /**
   * Belongs to user
   * @type {number}
   * @memberof ModelsPost
   */
  userID?: number;
}

/**
 *
 * @export
 * @interface ModelsTag
 */
export interface ModelsTag {
  /**
   *
   * @type {number}
   * @memberof ModelsTag
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ModelsTag
   */
  name?: string;
  /**
   *
   * @type {Array<ModelsUser>}
   * @memberof ModelsTag
   */
  users?: Array<ModelsUser>;
}

/**
 *
 * @export
 * @interface ModelsUser
 */
export interface ModelsUser {
  /**
   *
   * @type {boolean}
   * @memberof ModelsUser
   */
  admin?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModelsUser
   */
  atWilliams?: boolean;
  /**
   *
   * @type {string}
   * @memberof ModelsUser
   */
  campusPhoneEXT?: string;
  /**
   * Has campus status: either remote or on-campus
   * @type {string}
   * @memberof ModelsUser
   */
  campusStatus?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsUser
   */
  cellPhone?: string;
  /**
   *
   * @type {number}
   * @memberof ModelsUser
   */
  classYear?: number;
  /**
   *
   * @type {ModelsDepartment}
   * @memberof ModelsUser
   */
  department?: ModelsDepartment;
  /**
   * Belongs to Department iff professor
   * @type {number}
   * @memberof ModelsUser
   */
  departmentID?: number;
  /**
   *
   * @type {ModelsDormRoom}
   * @memberof ModelsUser
   */
  dormRoom?: ModelsDormRoom;
  /**
   * Belongs to Dorm Room iff student
   * @type {number}
   * @memberof ModelsUser
   */
  dormRoomID?: number;
  /**
   *
   * @type {boolean}
   * @memberof ModelsUser
   */
  dormVisible?: boolean;
  /**
   * Has many dormtrak reviews
   * @type {Array<ModelsDormtrakReview>}
   * @memberof ModelsUser
   */
  dormtrakReviews?: Array<ModelsDormtrakReview>;
  /**
   *
   * @type {string}
   * @memberof ModelsUser
   */
  entry?: string;
  /**
   *
   * @type {boolean}
   * @memberof ModelsUser
   */
  ephcatchEligibility?: boolean;
  /**
   * Has many ephcatches (owner side)
   * @type {Array<ModelsEphcatch>}
   * @memberof ModelsUser
   */
  ephcatches?: Array<ModelsEphcatch>;
  /**
   * Has one ephmatch profile
   * @type {ModelsEphmatchProfile}
   * @memberof ModelsUser
   */
  ephmatchProfile?: ModelsEphmatchProfile;
  /**
   *
   * @type {boolean}
   * @memberof ModelsUser
   */
  factrakAdmin?: boolean;
  /**
   * Has many factrak agreements
   * @type {Array<ModelsFactrakAgreement>}
   * @memberof ModelsUser
   */
  factrakAgreements?: Array<ModelsFactrakAgreement>;
  /**
   *
   * @type {number}
   * @memberof ModelsUser
   */
  factrakSurveyDeficit?: number;
  /**
   * As we cannot be both a student and a professor, this combines either a student or a professor's factrak survey. We populate this field as a hook AfterFind.
   * @type {Array<ModelsFactrakSurvey>}
   * @memberof ModelsUser
   */
  factrakSurveys?: Array<ModelsFactrakSurvey>;
  /**
   *
   * @type {boolean}
   * @memberof ModelsUser
   */
  hasAcceptedDormtrakPolicy?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModelsUser
   */
  hasAcceptedFactrakPolicy?: boolean;
  /**
   *
   * @type {string}
   * @memberof ModelsUser
   */
  homeCountry?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsUser
   */
  homePhone?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsUser
   */
  homeState?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsUser
   */
  homeTown?: string;
  /**
   *
   * @type {boolean}
   * @memberof ModelsUser
   */
  homeVisible?: boolean;
  /**
   *
   * @type {string}
   * @memberof ModelsUser
   */
  homeZip?: string;
  /**
   *
   * @type {number}
   * @memberof ModelsUser
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ModelsUser
   */
  major?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsUser
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsUser
   */
  nickname?: string;
  /**
   * If user is Off-Campus and thus doesn't have a dorm
   * @type {boolean}
   * @memberof ModelsUser
   */
  offCampus?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModelsUser
   */
  offCycle?: boolean;
  /**
   *
   * @type {ModelsOffice}
   * @memberof ModelsUser
   */
  office?: ModelsOffice;
  /**
   * Belongs to Office iff staff/professor
   * @type {number}
   * @memberof ModelsUser
   */
  officeID?: number;
  /**
   *
   * @type {boolean}
   * @memberof ModelsUser
   */
  optOutEphcatch?: boolean;
  /**
   *
   * @type {string}
   * @memberof ModelsUser
   */
  pronoun?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsUser
   */
  suBox?: string;
  /**
   * Has many tags
   * @type {Array<ModelsTag>}
   * @memberof ModelsUser
   */
  tags?: Array<ModelsTag>;
  /**
   *
   * @type {string}
   * @memberof ModelsUser
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsUser
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof ModelsUser
   */
  unixID?: string;
  /**
   *
   * @type {boolean}
   * @memberof ModelsUser
   */
  visible?: boolean;
  /**
   *
   * @type {string}
   * @memberof ModelsUser
   */
  williamsEmail?: string;
}

/**
 *
 * @export
 * @interface OldAuthResponse
 */
export interface OldAuthResponse {
  /**
   *
   * @type {string}
   * @memberof OldAuthResponse
   */
  expire?: string;
  /**
   *
   * @type {string}
   * @memberof OldAuthResponse
   */
  token?: string;
}

/**
 *
 * @export
 * @interface OldLoginParams
 */
export interface OldLoginParams {
  /**
   * If true, will authenticate based on IP. Fail if cannot get on-campus token.
   * @type {boolean}
   * @memberof OldLoginParams
   */
  localIP?: boolean;
  /**
   *
   * @type {string}
   * @memberof OldLoginParams
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof OldLoginParams
   */
  unixID?: string;
  /**
   * If true, will authenticate based on IP. Will return either off-campus or on-campus token
   * @type {boolean}
   * @memberof OldLoginParams
   */
  useIP?: boolean;
}

/**
 *
 * @export
 * @interface ResponsesGetUserResponseDepartment
 */
export interface ResponsesGetUserResponseDepartment {
  /**
   *
   * @type {number}
   * @memberof ResponsesGetUserResponseDepartment
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseDepartment
   */
  name?: string;
}

/**
 *
 * @export
 * @interface ResponsesGetUserResponseDorm
 */
export interface ResponsesGetUserResponseDorm {
  /**
   *
   * @type {number}
   * @memberof ResponsesGetUserResponseDorm
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseDorm
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof ResponsesGetUserResponseDorm
   */
  neighborhoodID?: number;
}

/**
 *
 * @export
 * @interface ResponsesGetUserResponseDormRoom
 */
export interface ResponsesGetUserResponseDormRoom {
  /**
   *
   * @type {ResponsesGetUserResponseDorm}
   * @memberof ResponsesGetUserResponseDormRoom
   */
  dorm?: ResponsesGetUserResponseDorm;
  /**
   *
   * @type {number}
   * @memberof ResponsesGetUserResponseDormRoom
   */
  dormID?: number;
  /**
   *
   * @type {number}
   * @memberof ResponsesGetUserResponseDormRoom
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseDormRoom
   */
  number?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseDormRoom
   */
  roomType?: string;
}

/**
 *
 * @export
 * @interface ResponsesGetUserResponseOffice
 */
export interface ResponsesGetUserResponseOffice {
  /**
   *
   * @type {number}
   * @memberof ResponsesGetUserResponseOffice
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseOffice
   */
  number?: string;
}

/**
 *
 * @export
 * @interface ResponsesGetUserResponseTag
 */
export interface ResponsesGetUserResponseTag {
  /**
   *
   * @type {number}
   * @memberof ResponsesGetUserResponseTag
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseTag
   */
  name?: string;
}

/**
 *
 * @export
 * @interface ResponsesGetUserResponseUser
 */
export interface ResponsesGetUserResponseUser {
  /**
   *
   * @type {boolean}
   * @memberof ResponsesGetUserResponseUser
   */
  admin?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesGetUserResponseUser
   */
  atWilliams?: boolean;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseUser
   */
  campusPhoneEXT?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseUser
   */
  campusStatus?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseUser
   */
  cellPhone?: string;
  /**
   *
   * @type {number}
   * @memberof ResponsesGetUserResponseUser
   */
  classYear?: number;
  /**
   *
   * @type {ResponsesGetUserResponseDepartment}
   * @memberof ResponsesGetUserResponseUser
   */
  department?: ResponsesGetUserResponseDepartment;
  /**
   *
   * @type {number}
   * @memberof ResponsesGetUserResponseUser
   */
  departmentID?: number;
  /**
   *
   * @type {ResponsesGetUserResponseDormRoom}
   * @memberof ResponsesGetUserResponseUser
   */
  dormRoom?: ResponsesGetUserResponseDormRoom;
  /**
   *
   * @type {number}
   * @memberof ResponsesGetUserResponseUser
   */
  dormRoomID?: number;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesGetUserResponseUser
   */
  dormVisible?: boolean;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseUser
   */
  entry?: string;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesGetUserResponseUser
   */
  ephcatchEligibility?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesGetUserResponseUser
   */
  factrakAdmin?: boolean;
  /**
   *
   * @type {number}
   * @memberof ResponsesGetUserResponseUser
   */
  factrakSurveyDeficit?: number;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesGetUserResponseUser
   */
  hasAcceptedDormtrakPolicy?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesGetUserResponseUser
   */
  hasAcceptedFactrakPolicy?: boolean;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseUser
   */
  homeCountry?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseUser
   */
  homePhone?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseUser
   */
  homeState?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseUser
   */
  homeTown?: string;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesGetUserResponseUser
   */
  homeVisible?: boolean;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseUser
   */
  homeZip?: string;
  /**
   *
   * @type {number}
   * @memberof ResponsesGetUserResponseUser
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseUser
   */
  major?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseUser
   */
  name?: string;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesGetUserResponseUser
   */
  offCampus?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesGetUserResponseUser
   */
  offCycle?: boolean;
  /**
   *
   * @type {ResponsesGetUserResponseOffice}
   * @memberof ResponsesGetUserResponseUser
   */
  office?: ResponsesGetUserResponseOffice;
  /**
   *
   * @type {number}
   * @memberof ResponsesGetUserResponseUser
   */
  officeID?: number;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesGetUserResponseUser
   */
  optOutEphcatch?: boolean;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseUser
   */
  pronoun?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseUser
   */
  suBox?: string;
  /**
   *
   * @type {Array<ResponsesGetUserResponseTag>}
   * @memberof ResponsesGetUserResponseUser
   */
  tags?: Array<ResponsesGetUserResponseTag>;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseUser
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseUser
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseUser
   */
  unixID?: string;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesGetUserResponseUser
   */
  visible?: boolean;
  /**
   *
   * @type {string}
   * @memberof ResponsesGetUserResponseUser
   */
  williamsEmail?: string;
}

/**
 *
 * @export
 * @interface ResponsesListMatchesResponseEphmatchMatch
 */
export interface ResponsesListMatchesResponseEphmatchMatch {
  /**
   *
   * @type {string}
   * @memberof ResponsesListMatchesResponseEphmatchMatch
   */
  createdAt?: string;
  /**
   *
   * @type {number}
   * @memberof ResponsesListMatchesResponseEphmatchMatch
   */
  id?: number;
  /**
   *
   * @type {ResponsesListMatchesResponseMatchedUser}
   * @memberof ResponsesListMatchesResponseEphmatchMatch
   */
  matchedUser?: ResponsesListMatchesResponseMatchedUser;
  /**
   *
   * @type {number}
   * @memberof ResponsesListMatchesResponseEphmatchMatch
   */
  matchedUserID?: number;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesListMatchesResponseEphmatchMatch
   */
  seenByMatchedUser?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesListMatchesResponseEphmatchMatch
   */
  seenBySelf?: boolean;
  /**
   *
   * @type {string}
   * @memberof ResponsesListMatchesResponseEphmatchMatch
   */
  updatedAt?: string;
}

/**
 *
 * @export
 * @interface ResponsesListMatchesResponseEphmatchProfile
 */
export interface ResponsesListMatchesResponseEphmatchProfile {
  /**
   *
   * @type {string}
   * @memberof ResponsesListMatchesResponseEphmatchProfile
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesListMatchesResponseEphmatchProfile
   */
  locationCountry?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesListMatchesResponseEphmatchProfile
   */
  locationState?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesListMatchesResponseEphmatchProfile
   */
  locationTown?: string;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesListMatchesResponseEphmatchProfile
   */
  locationVisible?: boolean;
  /**
   *
   * @type {string}
   * @memberof ResponsesListMatchesResponseEphmatchProfile
   */
  matchMessage?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesListMatchesResponseEphmatchProfile
   */
  messagingPlatform?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesListMatchesResponseEphmatchProfile
   */
  messagingUsername?: string;
}

/**
 *
 * @export
 * @interface ResponsesListMatchesResponseMatchedUser
 */
export interface ResponsesListMatchesResponseMatchedUser {
  /**
   *
   * @type {number}
   * @memberof ResponsesListMatchesResponseMatchedUser
   */
  classYear?: number;
  /**
   *
   * @type {string}
   * @memberof ResponsesListMatchesResponseMatchedUser
   */
  entry?: string;
  /**
   *
   * @type {ResponsesListMatchesResponseEphmatchProfile}
   * @memberof ResponsesListMatchesResponseMatchedUser
   */
  ephmatchProfile?: ResponsesListMatchesResponseEphmatchProfile;
  /**
   *
   * @type {number}
   * @memberof ResponsesListMatchesResponseMatchedUser
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ResponsesListMatchesResponseMatchedUser
   */
  major?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesListMatchesResponseMatchedUser
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesListMatchesResponseMatchedUser
   */
  nickname?: string;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesListMatchesResponseMatchedUser
   */
  offCycle?: boolean;
  /**
   *
   * @type {string}
   * @memberof ResponsesListMatchesResponseMatchedUser
   */
  pronoun?: string;
  /**
   *
   * @type {Array<ResponsesListMatchesResponseTag>}
   * @memberof ResponsesListMatchesResponseMatchedUser
   */
  tags?: Array<ResponsesListMatchesResponseTag>;
  /**
   *
   * @type {string}
   * @memberof ResponsesListMatchesResponseMatchedUser
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesListMatchesResponseMatchedUser
   */
  unixID?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesListMatchesResponseMatchedUser
   */
  williamsEmail?: string;
}

/**
 *
 * @export
 * @interface ResponsesListMatchesResponseTag
 */
export interface ResponsesListMatchesResponseTag {
  /**
   *
   * @type {number}
   * @memberof ResponsesListMatchesResponseTag
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ResponsesListMatchesResponseTag
   */
  name?: string;
}

/**
 *
 * @export
 * @interface ResponsesListUsersResponseDepartment
 */
export interface ResponsesListUsersResponseDepartment {
  /**
   *
   * @type {number}
   * @memberof ResponsesListUsersResponseDepartment
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseDepartment
   */
  name?: string;
}

/**
 *
 * @export
 * @interface ResponsesListUsersResponseDorm
 */
export interface ResponsesListUsersResponseDorm {
  /**
   *
   * @type {number}
   * @memberof ResponsesListUsersResponseDorm
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseDorm
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof ResponsesListUsersResponseDorm
   */
  neighborhoodID?: number;
}

/**
 *
 * @export
 * @interface ResponsesListUsersResponseDormRoom
 */
export interface ResponsesListUsersResponseDormRoom {
  /**
   *
   * @type {ResponsesListUsersResponseDorm}
   * @memberof ResponsesListUsersResponseDormRoom
   */
  dorm?: ResponsesListUsersResponseDorm;
  /**
   *
   * @type {number}
   * @memberof ResponsesListUsersResponseDormRoom
   */
  dormID?: number;
  /**
   *
   * @type {number}
   * @memberof ResponsesListUsersResponseDormRoom
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseDormRoom
   */
  number?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseDormRoom
   */
  roomType?: string;
}

/**
 *
 * @export
 * @interface ResponsesListUsersResponseOffice
 */
export interface ResponsesListUsersResponseOffice {
  /**
   *
   * @type {number}
   * @memberof ResponsesListUsersResponseOffice
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseOffice
   */
  number?: string;
}

/**
 *
 * @export
 * @interface ResponsesListUsersResponseTag
 */
export interface ResponsesListUsersResponseTag {
  /**
   *
   * @type {number}
   * @memberof ResponsesListUsersResponseTag
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseTag
   */
  name?: string;
}

/**
 *
 * @export
 * @interface ResponsesListUsersResponseUser
 */
export interface ResponsesListUsersResponseUser {
  /**
   *
   * @type {boolean}
   * @memberof ResponsesListUsersResponseUser
   */
  admin?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesListUsersResponseUser
   */
  atWilliams?: boolean;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseUser
   */
  campusPhoneEXT?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseUser
   */
  campusStatus?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseUser
   */
  cellPhone?: string;
  /**
   *
   * @type {number}
   * @memberof ResponsesListUsersResponseUser
   */
  classYear?: number;
  /**
   *
   * @type {ResponsesListUsersResponseDepartment}
   * @memberof ResponsesListUsersResponseUser
   */
  department?: ResponsesListUsersResponseDepartment;
  /**
   *
   * @type {number}
   * @memberof ResponsesListUsersResponseUser
   */
  departmentID?: number;
  /**
   *
   * @type {ResponsesListUsersResponseDormRoom}
   * @memberof ResponsesListUsersResponseUser
   */
  dormRoom?: ResponsesListUsersResponseDormRoom;
  /**
   *
   * @type {number}
   * @memberof ResponsesListUsersResponseUser
   */
  dormRoomID?: number;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesListUsersResponseUser
   */
  dormVisible?: boolean;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseUser
   */
  entry?: string;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesListUsersResponseUser
   */
  ephcatchEligibility?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesListUsersResponseUser
   */
  factrakAdmin?: boolean;
  /**
   *
   * @type {number}
   * @memberof ResponsesListUsersResponseUser
   */
  factrakSurveyDeficit?: number;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesListUsersResponseUser
   */
  hasAcceptedDormtrakPolicy?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesListUsersResponseUser
   */
  hasAcceptedFactrakPolicy?: boolean;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseUser
   */
  homeCountry?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseUser
   */
  homePhone?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseUser
   */
  homeState?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseUser
   */
  homeTown?: string;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesListUsersResponseUser
   */
  homeVisible?: boolean;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseUser
   */
  homeZip?: string;
  /**
   *
   * @type {number}
   * @memberof ResponsesListUsersResponseUser
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseUser
   */
  major?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseUser
   */
  name?: string;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesListUsersResponseUser
   */
  offCampus?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesListUsersResponseUser
   */
  offCycle?: boolean;
  /**
   *
   * @type {ResponsesListUsersResponseOffice}
   * @memberof ResponsesListUsersResponseUser
   */
  office?: ResponsesListUsersResponseOffice;
  /**
   *
   * @type {number}
   * @memberof ResponsesListUsersResponseUser
   */
  officeID?: number;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesListUsersResponseUser
   */
  optOutEphcatch?: boolean;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseUser
   */
  pronoun?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseUser
   */
  suBox?: string;
  /**
   *
   * @type {Array<ResponsesListUsersResponseTag>}
   * @memberof ResponsesListUsersResponseUser
   */
  tags?: Array<ResponsesListUsersResponseTag>;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseUser
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseUser
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseUser
   */
  unixID?: string;
  /**
   *
   * @type {boolean}
   * @memberof ResponsesListUsersResponseUser
   */
  visible?: boolean;
  /**
   *
   * @type {string}
   * @memberof ResponsesListUsersResponseUser
   */
  williamsEmail?: string;
}

/**
 *
 * @export
 * @interface ServerHealthCheckResponse
 */
export interface ServerHealthCheckResponse {
  /**
   *
   * @type {boolean}
   * @memberof ServerHealthCheckResponse
   */
  ok?: boolean;
}

/**
 *
 * @export
 * @interface UserUpdateUserParams
 */
export interface UserUpdateUserParams {
  /**
   *
   * @type {string}
   * @memberof UserUpdateUserParams
   */
  campusStatus?: string;
  /**
   *
   * @type {boolean}
   * @memberof UserUpdateUserParams
   */
  dormVisible?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserUpdateUserParams
   */
  hasAcceptedDormtrakPolicy?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserUpdateUserParams
   */
  hasAcceptedFactrakPolicy?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserUpdateUserParams
   */
  homeVisible?: boolean;
  /**
   *
   * @type {string}
   * @memberof UserUpdateUserParams
   */
  nickname?: string;
  /**
   *
   * @type {boolean}
   * @memberof UserUpdateUserParams
   */
  offCycle?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserUpdateUserParams
   */
  optOutEphcatch?: boolean;
  /**
   *
   * @type {string}
   * @memberof UserUpdateUserParams
   */
  pronoun?: string;
  /**
   *
   * @type {boolean}
   * @memberof UserUpdateUserParams
   */
  visible?: boolean;
}

/**
 *
 * @export
 * @interface UserUpdateUserTagsParams
 */
export interface UserUpdateUserTagsParams {
  /**
   *
   * @type {Array<string>}
   * @memberof UserUpdateUserTagsParams
   */
  tags?: Array<string>;
}
